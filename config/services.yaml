services:
  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  Crovitche\SwissGeoBundle\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Enum/'

  # ----<  🔧 Commands >--------------------------------------------------------

  Crovitche\SwissGeoBundle\Command\Import\Meilisearch\GenerateDocumentCommand:
    arguments:
      - '@doctrine.dbal.default_connection'
    tags: ['console.command']

  Crovitche\SwissGeoBundle\Command\Service\ZipArchive\Extractor:
    arguments:
      - '@http_client'
      - '@logger'

  Crovitche\SwissGeoBundle\Command\Service\ExtractZipFromServerService:
    arguments:
      - '@http_client'

  Crovitche\SwissGeoBundle\Command\Service\Cache\GetTimestampFromCacheOrFolderService:
    arguments:
      - '@cache.app'

  Crovitche\SwissGeoBundle\Command\Service\Cache\WriteCacheWithTimestampService:
    arguments:
      - '@cache.app'

  Crovitche\SwissGeoBundle\Command\Import\ImportBuildingAddressesCommand:
    arguments:
      - '@Crovitche\SwissGeoBundle\Command\Service\ZipArchive\Extractor'
      - '@doctrine.dbal.default_connection'
      - '@Crovitche\SwissGeoBundle\Command\Service\ExtractZipFromServerService'
      - '@logger'
      - '@Crovitche\SwissGeoBundle\Command\Service\Cache\GetTimestampFromCacheOrFolderService'
      - '@Crovitche\SwissGeoBundle\Command\Service\Cache\WriteCacheWithTimestampService'
      - '%crovitche_swiss_geo.import.building_addresses_url%'
    tags: ['console.command']

  Crovitche\SwissGeoBundle\Command\Import\ImportLocalitiesCommand:
    arguments:
      - '@Crovitche\SwissGeoBundle\Command\Service\ZipArchive\Extractor'
      - '@doctrine.dbal.default_connection'
      - '@Crovitche\SwissGeoBundle\Command\Service\ExtractZipFromServerService'
      - '@logger'
      - '%crovitche_swiss_geo.import.localities_url%'
    tags: ['console.command']

  Crovitche\SwissGeoBundle\Command\Import\ImportStreetsCommand:
    arguments:
      - '@Crovitche\SwissGeoBundle\Command\Service\ZipArchive\Extractor'
      - '@Crovitche\SwissGeoBundle\Command\Service\Cache\GetTimestampFromCacheOrFolderService'
      - '@Crovitche\SwissGeoBundle\Command\Service\Cache\WriteCacheWithTimestampService'
      - '@doctrine.dbal.default_connection'
      - '@Crovitche\SwissGeoBundle\Command\Service\ExtractZipFromServerService'
      - '@logger'
      - '%crovitche_swiss_geo.import.streets_url%'
    tags: ['console.command']

  # ----</ 🔧 Commands >--------------------------------------------------------

  # ----<  📦 Repositories >----------------------------------------------------

  Crovitche\SwissGeoBundle\Repository\BuildingAddressRepository:
    tags: ['doctrine.repository_service']
    arguments:
      - '@doctrine'

  Crovitche\SwissGeoBundle\Repository\LocalityRepository:
    tags: ['doctrine.repository_service']
    arguments:
      - '@doctrine'

  Crovitche\SwissGeoBundle\Repository\StreetLocalityRepository:
    tags: ['doctrine.repository_service']
    arguments:
      - '@doctrine'

  Crovitche\SwissGeoBundle\Repository\StreetRepository:
    tags: ['doctrine.repository_service']
    arguments:
      - '@doctrine'

  # ----</ 📦 Repositories >----------------------------------------------------

  # ----<  🔀 Controllers >-----------------------------------------------------

  Crovitche\SwissGeoBundle\Controller\Api\BuildingAddressApiController:
    public: true
    arguments:
      - '@Crovitche\SwissGeoBundle\Repository\BuildingAddressRepository'
      - '@request_stack'
    tags: ['container.service_subscriber']
    calls:
      - setContainer: [ '@service_container' ]

  Crovitche\SwissGeoBundle\Controller\Api\LocalityApiController:
    public: true
    arguments:
      - '@Crovitche\SwissGeoBundle\Repository\LocalityRepository'
      - '@request_stack'
    tags: [ 'container.service_subscriber' ]
    calls:
      - setContainer: [ '@service_container' ]

  Crovitche\SwissGeoBundle\Controller\Api\RegionApiController:
    public: true
    arguments:
      - '@Crovitche\SwissGeoBundle\Repository\RegionRepository'
      - '@request_stack'
    tags: [ 'container.service_subscriber' ]
    calls:
      - setContainer: [ '@service_container' ]

  Crovitche\SwissGeoBundle\Controller\Api\StreetApiController:
    public: true
    arguments:
      - '@Crovitche\SwissGeoBundle\Repository\StreetRepository'
      - '@request_stack'
    tags: [ 'container.service_subscriber' ]
    calls:
      - setContainer: [ '@service_container' ]

  # ----</ 🔀 Controllers >-----------------------------------------------------

  # ----<  📝 Form >-------------------------------------------------------------

  Crovitche\SwissGeoBundle\Form\DataTransformer\SlugToEntityTransformer:
    arguments:
      - '@doctrine.orm.default_entity_manager'

  Crovitche\SwissGeoBundle\Form\Type\RemoteEntityType:
    arguments:
      - '@doctrine.orm.default_entity_manager'
    tags: ['form.type']

  Crovitche\SwissGeoBundle\Form\BuildingAddressType:
    tags: ['form.type']

  Crovitche\SwissGeoBundle\Form\RegionType:
    tags: [ 'form.type' ]

  # ----</ 📝 Form >-------------------------------------------------------------
